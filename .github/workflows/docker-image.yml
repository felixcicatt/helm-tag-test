name: Docker Image CI

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SHOULD_RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}
  SHOULD_PUSH: ${{ github.event_name != 'pull_request' }}
  IS_LATEST: false

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write
  pages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: "Find the latest release tag (determined by semver sort)"
        id: latest-semver
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          REPO_URL: ${{ github.event.repository.html_url }}
          # Filter for semver tags like: v1.2.34 (Ignores pre-release tags)
          TAG_FILTER: '^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$'
        # Retrieves the tags for the repo sorted by version in descending order,
        # `awk` strips away the first column (commit hash)
        # `grep` filters the tags to only those we care about
        # `head` takes the top/first line which is the highest ranged semver tag
        # The result has `refs/tags/v` prefixing the semver value, similar to `github.ref`
        run: |
          TAG=$(
            git ls-remote --exit-code --refs --tags --sort='-v:refname' "${REPO_URL}" \
            | awk '{print $2}' | grep -E "${TAG_FILTER}" | head -n 1
          )
          echo "tag-ref=${TAG}" >> "${GITHUB_OUTPUT}"
          if [ "$TAG" = "${{ github.ref }}" ] ; then
              echo "IS_LATEST=true" >> "$GITHUB_ENV"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=${{ env.IS_LATEST }}
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: ${{ fromJSON(env.SHOULD_PUSH) }}
          sbom: ${{ fromJSON(env.SHOULD_PUSH) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ fromJSON(env.SHOULD_RELEASE) && fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] || '0.0.0' }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          context: ./my-app
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Configure Git
        if: ${{ fromJSON(env.SHOULD_RELEASE) }}
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        if: ${{ fromJSON(env.SHOULD_RELEASE) }}
        uses: azure/setup-helm@v1
        with:
          version: v3.8.1

      - name: Update chart values with new image tag
        uses: mikefarah/yq@master
        if: ${{ fromJSON(env.SHOULD_RELEASE) }}
        env:
          VERSION: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
        with:
          cmd: |
            yq eval '.appVersion = "${{ env.VERSION }}"' -i charts/my-chart/Chart.yaml
            yq eval '.version = "${{ env.VERSION }}"' -i charts/my-chart/Chart.yaml

      - working-directory: charts
        if: ${{ fromJSON(env.SHOULD_RELEASE) }}
        run:  |
          url=$(gh api "repos/$GITHUB_REPOSITORY/pages" --jq '.html_url')
          helm package ./my-chart
          curl --output _index.yaml "$url/index.yaml"
          helm repo index . --url "$url" --merge ./_index.yaml
          mkdir ../pages
          mv index.yaml ../pages/
          mv *.tgz ../pages/

      - name: Upload artifact
        if: ${{ fromJSON(env.SHOULD_RELEASE) }}
        uses: actions/upload-pages-artifact@v3
        with:
          # directory of your reports
          path: pages

  deploy:
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
